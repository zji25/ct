prog -> [double val]:
    c {res.val = v0.val;}
c -> [double val]:
    e ci[v0.val] {res.val = v1.val;}
ci [double acc] -> [double val]:
    EPS {res.val = acc;}
    | EXL2 ci[fac2(acc)] {res.val = v1.val;}
    | EXL ci[fac(acc)] {res.val = v1.val; }
e -> [double val]:
    t ei[v0.val] {res.val = v1.val;}
ei [double acc] -> [double val]:
    EPS {res.val = acc;}
    | PLUS t ei[acc+v1.val] {res.val = v2.val;}
    | MINUS t ei[acc-v1.val] {res.val = v2.val;}
t -> [double val]:
    f ti[v0.val] {res.val = v1.val;}
ti [double acc] -> [double val]:
    EPS {res.val = acc;}
    | MUL f ti[acc*v1.val] {res.val = v2.val;}
    | DIV f ti[acc/v1.val] {res.val = v2.val;}
f -> [double val]:
    p pi[v0.val] {res.val = v1.val;}
p -> [double val]:
    n {res.val = v0.val;}
    | MINUS p {res.val = -v1.val;}
    | LR c RR {res.val = v1.val;}
    | SIN LR c RR {res.val = Math.sin(v2.val);}
    | MAX LR c COMMA c RR {res.val = Math.max(v2.val, v4.val);}
    | MIN LR c COMMA c RR {res.val = Math.min(v2.val, v4.val);}
    | LS c RS {res.val = (int) v1.val;}
    | LC c RC {res.val = v1.val % 1;}
pi [double acc] -> [double val]:
    EPS {res.val = acc;}
    | POW p pi[v1.val] {res.val = Math.pow(acc, v2.val);}
n -> [double val]:
    NUMBER {res.val = Double.parseDouble(v0.value);}

PLUS = "\\+"
MINUS = "-"
MUL = "\\*"
DIV = "/"
NUMBER = "[0-9]{1,13}(\\.[0-9]*)?"
LR = "\\("
RR = "\\)"
EXP = "\\^"
SIN = "sin"
MAX = "max"
MIN = "min"
COMMA = ","
POW = "\\^"
EXL2 = "!!"
EXL = "!"
LS = "\\["
RS = "\\]"
LC = "\\{"
RC = "\\}"

```
private double fac(double n) {
     double f = 1;
     for (int i = 2; i <= n; ++i) f *= i;
     return f;
}
private double fac2(double n) {
    double f = 1;
    for (int i = ((n % 2 == 0) ? 2 : 1); i <= n; i += 2) f *= i;
    return f;
}
```